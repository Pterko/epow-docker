name: Docker Build and Publish

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Trigger on pushes to the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions:
      contents: read       # Needed to check out the repository
      packages: write      # Needed to push packages (Docker images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository code

      # <<<--- ADD THIS STEP --- >>>
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Sets up a buildx builder instance

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN is automatically generated by Actions,
          # and has permissions granted by the 'permissions' block above.
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta # Give this step an ID so we can reference its outputs
        uses: docker/metadata-action@v5
        with:
          # Define the image name format for GHCR
          # It will be ghcr.io/YOUR_GITHUB_USERNAME/YOUR_REPOSITORY_NAME
          images: ghcr.io/${{ github.repository }}
          # Generate tags: 'latest', git commit sha, potentially git tags
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Path to the Dockerfile
          push: true # Push the image after building
          # Use the tags generated by the metadata step
          tags: ${{ steps.meta.outputs.tags }}
          # Use the labels generated by the metadata step
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build cache for faster builds - This should now work
          cache-from: type=gha
          cache-to: type=gha,mode=max